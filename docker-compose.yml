version: '3.5'
services:
  # API - Instância 01
  api1: &api
    build: .
    depends_on:
      - postgres
    deploy:
      resources:
        limits:
          cpus: '0.15'
          memory: '0.4GB'
    network_mode: host
    hostname: api1
    environment:
      DATABASE_URL: postgres://rinha:r1nh4@172.21.86.77:5432/public?sslmode=disable
      HTTP_PORT: 8666
      MAX_CONNECTIONS: 50
    command: app

  # API - Instância 02
  api2:
    <<: *api
    depends_on:
      - postgres
    network_mode: host
    hostname: api2
    environment:
      DATABASE_URL: postgres://rinha:r1nh4@172.21.86.77:5432/public?sslmode=disable
      HTTP_PORT: 8667
      MAX_CONNECTIONS: 50

  # Load Balancer
  nginx: 
    image: nginx:latest
    network_mode: host
    command: ["nginx", "-g", "daemon off;"]
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api1
      - api2
    ulimits:
      nproc: 1000000
      nofile:
        soft: 1000000
        hard: 1000000
    deploy:
      resources:
        limits:
          cpus: '0.15'
          memory: '0.5GB'
          
  # Banco de dados
  postgres:
    image: postgres
    hostname: db
    environment:
      POSTGRES_USER: rinha
      POSTGRES_PASSWORD: r1nh4
      POSTGRES_DB: public
    volumes:
      - ./config/db/db-init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./config/db/postgresql.conf:/docker-entrypoint-initdb.d/postgresql.conf
    command: postgres -c config_file=/docker-entrypoint-initdb.d/postgresql.conf
    network_mode: host
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.9'
          memory: '1.4GB'